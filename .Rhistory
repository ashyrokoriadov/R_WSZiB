data$mths_since_recent_revol_delinq
data$mths_since_recent_bc_dlq
substitute_na_by_max_value <- function(data, na_stats_data, min_ratio=0.75, max_ratio=0.95)
{
#numeric columns to be replaced by maximum value
print(min_ratio)
mergeDF_failed_numbers_replace <- filter(na_stats_data, na_stats_data$na_ratio > 0.75
& na_stats_data$na_ratio <= max_ratio
& na_stats_data$data_type %in% c('numeric', 'integer'))
print(mergeDF_failed_numbers_replace)
print('-------------------------------')
print(mergeDF_failed_numbers_replace$column_name)
print('-------------------------------')
print('KONIEC!!!')
data <- data %>%
mutate_at(mergeDF_failed_numbers_replace$column_name, ~replace(., is.na(.), max(as.numeric(.), na.rm=TRUE)))
return(data)
}
file_name <- "LoanStats_2017Q1.csv"
print(paste(format(get_date_time_stamp()),'-> Try to read', file_name, '...'))
data <- read.csv(file_name)
print(paste(format(get_date_time_stamp()),'-> File', file_name, 'was read.'))
data <- clean_loan_stats_file(data)
data$mths_since_last_record
data$mths_since_last_record
substitute_na_by_max_value <- function(data, na_stats_data, min_ratio=0.75, max_ratio=0.95)
{
#numeric columns to be replaced by maximum value
print(min_ratio)
mergeDF_failed_numbers_replace <- filter(na_stats_data, na_stats_data$na_ratio > 0.75
& na_stats_data$na_ratio <= max_ratio
& na_stats_data$data_type %in% c('numeric', 'integer'))
print(mergeDF_failed_numbers_replace)
print('-------------------------------')
print(mergeDF_failed_numbers_replace$column_name)
print('-------------------------------')
print('KONIEC!!!')
data <- data %>%
mutate_at(mergeDF_failed_numbers_replace$column_name, ~replace(., is.na(.), max(as.numeric(.), na.rm=TRUE)))
print(data$mths_since_last_record)
return(data)
}
file_name <- "LoanStats_2017Q1.csv"
print(paste(format(get_date_time_stamp()),'-> Try to read', file_name, '...'))
data <- read.csv(file_name)
print(paste(format(get_date_time_stamp()),'-> File', file_name, 'was read.'))
data <- clean_loan_stats_file(data)
substitute_na_by_max_value <- function(data, na_stats_data, min_ratio=0.75, max_ratio=0.95)
{
#numeric columns to be replaced by maximum value
print(min_ratio)
mergeDF_failed_numbers_replace <- filter(na_stats_data, na_stats_data$na_ratio > 0.75
& na_stats_data$na_ratio <= max_ratio
& na_stats_data$data_type %in% c('numeric', 'integer'))
print(mergeDF_failed_numbers_replace)
print('-------------------------------')
print(mergeDF_failed_numbers_replace$column_name)
print('-------------------------------')
print('KONIEC!!!')
data <- apply(data, 2, function(name)
{
if(name %in% mergeDF_failed_numbers_replace$column_name)
{
data$name = max(data$name, na.rm=TRUE)
}
})
#df2$var1[is.na(df1$var1)] <-  max(df2$var1, na.rm=TRUE)
#data <- data %>%
#  mutate_at(mergeDF_failed_numbers_replace$column_name, ~replace(., is.na(.), max(as.numeric(.), na.rm=TRUE)))
print(data$mths_since_last_record)
return(data)
}
file_name <- "LoanStats_2017Q1.csv"
print(paste(format(get_date_time_stamp()),'-> Try to read', file_name, '...'))
data <- read.csv(file_name)
print(paste(format(get_date_time_stamp()),'-> File', file_name, 'was read.'))
data <- clean_loan_stats_file(data)
substitute_na_by_max_value <- function(data, na_stats_data, min_ratio=0.75, max_ratio=0.95)
{
#numeric columns to be replaced by maximum value
print(min_ratio)
mergeDF_failed_numbers_replace <- filter(na_stats_data, na_stats_data$na_ratio > 0.75
& na_stats_data$na_ratio <= max_ratio
& na_stats_data$data_type %in% c('numeric', 'integer'))
print(mergeDF_failed_numbers_replace)
print('-------------------------------')
print(mergeDF_failed_numbers_replace$column_name)
print('-------------------------------')
print('KONIEC!!!')
data <- apply(data, 2, function(name)
{
if(name %in% mergeDF_failed_numbers_replace$column_name)
{
data$name[is.na(data$name)] = max(data$name, na.rm=TRUE)
}
})
#df2$var1[is.na(df1$var1)] <-  max(df2$var1, na.rm=TRUE)
#data <- data %>%
#  mutate_at(mergeDF_failed_numbers_replace$column_name, ~replace(., is.na(.), max(as.numeric(.), na.rm=TRUE)))
print(data$mths_since_last_record)
return(data)
}
file_name <- "LoanStats_2017Q1.csv"
print(paste(format(get_date_time_stamp()),'-> Try to read', file_name, '...'))
data <- read.csv(file_name)
print(paste(format(get_date_time_stamp()),'-> File', file_name, 'was read.'))
data <- clean_loan_stats_file(data)
substitute_na_by_max_value <- function(data, na_stats_data, min_ratio=0.75, max_ratio=0.95)
{
#numeric columns to be replaced by maximum value
print(min_ratio)
mergeDF_failed_numbers_replace <- filter(na_stats_data, na_stats_data$na_ratio > 0.75
& na_stats_data$na_ratio <= max_ratio
& na_stats_data$data_type %in% c('numeric', 'integer'))
print(mergeDF_failed_numbers_replace)
print('-------------------------------')
print(mergeDF_failed_numbers_replace$column_name)
print('-------------------------------')
print('KONIEC!!!')
data <- apply(data, 2, function(name)
{
if(name %in% mergeDF_failed_numbers_replace$column_name)
{
#data$name[is.na(data$name)] = max(data$name, na.rm=TRUE)
print(data[name])
}
})
#df2$var1[is.na(df1$var1)] <-  max(df2$var1, na.rm=TRUE)
#data <- data %>%
#  mutate_at(mergeDF_failed_numbers_replace$column_name, ~replace(., is.na(.), max(as.numeric(.), na.rm=TRUE)))
print(data$mths_since_last_record)
return(data)
}
file_name <- "LoanStats_2017Q1.csv"
print(paste(format(get_date_time_stamp()),'-> Try to read', file_name, '...'))
data <- read.csv(file_name)
print(paste(format(get_date_time_stamp()),'-> File', file_name, 'was read.'))
data <- clean_loan_stats_file(data)
substitute_na_by_max_value <- function(data, na_stats_data, min_ratio=0.75, max_ratio=0.95)
{
#numeric columns to be replaced by maximum value
print(min_ratio)
mergeDF_failed_numbers_replace <- filter(na_stats_data, na_stats_data$na_ratio > 0.75
& na_stats_data$na_ratio <= max_ratio
& na_stats_data$data_type %in% c('numeric', 'integer'))
print(mergeDF_failed_numbers_replace)
print('-------------------------------')
print(mergeDF_failed_numbers_replace$column_name)
print('-------------------------------')
print('KONIEC!!!')
#data <- apply(data, 2, function(name)
#  {
#   if(name %in% mergeDF_failed_numbers_replace$column_name)
#   {
#     #data$name[is.na(data$name)] = max(data$name, na.rm=TRUE)
#     print(data[name])
#   }
#  })
#df2$var1[is.na(df1$var1)] <-  max(df2$var1, na.rm=TRUE)
data <- data %>%
mutate_at(c('mths_since_last_record'), ~replace(., is.na(.), max(., na.rm=TRUE)))
print(data$mths_since_last_record)
return(data)
}
file_name <- "LoanStats_2017Q1.csv"
print(paste(format(get_date_time_stamp()),'-> Try to read', file_name, '...'))
data <- read.csv(file_name)
print(paste(format(get_date_time_stamp()),'-> File', file_name, 'was read.'))
data <- clean_loan_stats_file(data)
substitute_na_by_max_value <- function(data, na_stats_data, min_ratio=0.75, max_ratio=0.95)
{
#numeric columns to be replaced by maximum value
print(min_ratio)
mergeDF_failed_numbers_replace <- filter(na_stats_data, na_stats_data$na_ratio > 0.75
& na_stats_data$na_ratio <= max_ratio
& na_stats_data$data_type %in% c('numeric', 'integer'))
print(mergeDF_failed_numbers_replace)
print('-------------------------------')
print(as.vector(mergeDF_failed_numbers_replace$column_name))
print('-------------------------------')
print('KONIEC!!!')
#data <- apply(data, 2, function(name)
#  {
#   if(name %in% mergeDF_failed_numbers_replace$column_name)
#   {
#     #data$name[is.na(data$name)] = max(data$name, na.rm=TRUE)
#     print(data[name])
#   }
#  })
#df2$var1[is.na(df1$var1)] <-  max(df2$var1, na.rm=TRUE)
data <- data %>%
mutate_at(c('mths_since_last_record'), ~replace(., is.na(.), max(., na.rm=TRUE)))
print(data$mths_since_last_record)
return(data)
}
file_name <- "LoanStats_2017Q1.csv"
print(paste(format(get_date_time_stamp()),'-> Try to read', file_name, '...'))
data <- read.csv(file_name)
print(paste(format(get_date_time_stamp()),'-> File', file_name, 'was read.'))
data <- clean_loan_stats_file(data)
substitute_na_by_max_value <- function(data, na_stats_data, min_ratio=0.75, max_ratio=0.95)
{
#numeric columns to be replaced by maximum value
print(min_ratio)
mergeDF_failed_numbers_replace <- filter(na_stats_data, na_stats_data$na_ratio > 0.75
& na_stats_data$na_ratio <= max_ratio
& na_stats_data$data_type %in% c('numeric', 'integer'))
print(mergeDF_failed_numbers_replace)
print('-------------------------------')
print(as.vector(mergeDF_failed_numbers_replace$column_name))
print('-------------------------------')
print('KONIEC!!!')
#data <- apply(data, 2, function(name)
#  {
#   if(name %in% mergeDF_failed_numbers_replace$column_name)
#   {
#     #data$name[is.na(data$name)] = max(data$name, na.rm=TRUE)
#     print(data[name])
#   }
#  })
#df2$var1[is.na(df1$var1)] <-  max(df2$var1, na.rm=TRUE)
data <- data %>%
mutate_at(as.vector(mergeDF_failed_numbers_replace$column_name), ~replace(., is.na(.), max(., na.rm=TRUE)))
print(data$mths_since_last_record)
print(data$mths_since_recent_bc_dlq)
return(data)
}
file_name <- "LoanStats_2017Q1.csv"
print(paste(format(get_date_time_stamp()),'-> Try to read', file_name, '...'))
data <- read.csv(file_name)
print(paste(format(get_date_time_stamp()),'-> File', file_name, 'was read.'))
data <- clean_loan_stats_file(data)
remove_columns <- function(data, column_names)
{
return(data[ , !(names(data) %in% column_names)])
}
substitute_na_by_max_value <- function(data, na_stats_data, min_ratio=0.75, max_ratio=0.95)
{
#numeric columns to be replaced by maximum value
print(min_ratio)
mergeDF_failed_numbers_replace <- filter(na_stats_data, na_stats_data$na_ratio > 0.40
& na_stats_data$na_ratio <= max_ratio
& na_stats_data$data_type %in% c('numeric', 'integer'))
print(mergeDF_failed_numbers_replace)
print('-------------------------------')
print(as.vector(mergeDF_failed_numbers_replace$column_name))
print('-------------------------------')
print('KONIEC!!!')
data <- data %>%
mutate_at(as.vector(mergeDF_failed_numbers_replace$column_name), ~replace(., is.na(.), max(., na.rm=TRUE)))
print(data$mths_since_last_record)
print(data$mths_since_recent_bc_dlq)
return(data)
}
file_name <- "LoanStats_2017Q1.csv"
print(paste(format(get_date_time_stamp()),'-> Try to read', file_name, '...'))
data <- read.csv(file_name)
print(paste(format(get_date_time_stamp()),'-> File', file_name, 'was read.'))
data <- clean_loan_stats_file(data)
substitute_na_by_max_value <- function(data, na_stats_data, min_ratio=0.75, max_ratio=0.95)
{
#numeric columns to be replaced by maximum value
print(min_ratio)
mergeDF_failed_numbers_replace <- filter(na_stats_data, na_stats_data$na_ratio > min_ratio
& na_stats_data$na_ratio <= max_ratio
& na_stats_data$data_type %in% c('numeric', 'integer'))
print(mergeDF_failed_numbers_replace)
print('-------------------------------')
print(as.vector(mergeDF_failed_numbers_replace$column_name))
print('-------------------------------')
print('KONIEC!!!')
data <- data %>%
mutate_at(as.vector(mergeDF_failed_numbers_replace$column_name), ~replace(., is.na(.), max(., na.rm=TRUE)))
print(data$mths_since_last_record)
print(data$mths_since_recent_bc_dlq)
return(data)
}
file_name <- "LoanStats_2017Q1.csv"
print(paste(format(get_date_time_stamp()),'-> Try to read', file_name, '...'))
data <- read.csv(file_name)
print(paste(format(get_date_time_stamp()),'-> File', file_name, 'was read.'))
data <- clean_loan_stats_file(data)
substitute_na_by_max_value <- function(data, na_stats_data, min_ratio, max_ratio)
{
#numeric columns to be replaced by maximum value
print(min_ratio)
mergeDF_failed_numbers_replace <- filter(na_stats_data, na_stats_data$na_ratio > min_ratio
& na_stats_data$na_ratio <= max_ratio
& na_stats_data$data_type %in% c('numeric', 'integer'))
data <- data %>%
mutate_at(as.vector(mergeDF_failed_numbers_replace$column_name), ~replace(., is.na(.), max(., na.rm=TRUE)))
return(data)
}
file_name <- "LoanStats_2017Q1.csv"
print(paste(format(get_date_time_stamp()),'-> Try to read', file_name, '...'))
data <- read.csv(file_name)
print(paste(format(get_date_time_stamp()),'-> File', file_name, 'was read.'))
data <- clean_loan_stats_file(data)
substitute_na_by_max_value <- function(data, na_stats_data, min_ratio, max_ratio)
{
#numeric columns to be replaced by maximum value
mergeDF_failed_numbers_replace <- filter(na_stats_data, na_stats_data$na_ratio > min_ratio
& na_stats_data$na_ratio <= max_ratio
& na_stats_data$data_type %in% c('numeric', 'integer'))
data <- data %>%
mutate_at(as.vector(mergeDF_failed_numbers_replace$column_name), ~replace(., is.na(.), max(., na.rm=TRUE)))
return(data)
}
substitute_na_by_min_value <- function(data, na_stats_data, min_ratio, max_ratio)
{
#numeric columns to be replaced by minimum value
mergeDF_failed_numbers_replace <- filter(na_stats_data, na_stats_data$na_ratio > min_ratio
& na_stats_data$na_ratio <= max_ratio
& na_stats_data$data_type %in% c('numeric', 'integer'))
data <- data %>%
mutate_at(as.vector(mergeDF_failed_numbers_replace$column_name), ~replace(., is.na(.), min(., na.rm=TRUE)))
}
clean_loan_stats_file <- function(data)
{
data_colnames <- get_column_names(data)
print(paste(format(get_date_time_stamp()),'-> Column names were read.'))
data_types <- get_column_types(data)
print(paste(format(get_date_time_stamp()),'-> Column types were read'))
print(count_column_by_types(data_types))
numeric_data <- get_numeric_integer_columns(data)
print(paste(format(get_date_time_stamp()),'-> Numeric / integer data were obtained.'))
numeric_data_summary <- summarise_numeric_data(numeric_data)
print(paste(format(get_date_time_stamp()),'-> Numeric / integer data summary were obtained.'))
na_stats <- get_na_statistics(data, data_colnames, data_types)
print(paste(format(get_date_time_stamp()),'-> NA statistics were obtained.'))
print(na_stats)
print(paste(format(get_date_time_stamp()),'-> Columns with NA ratio greater than 0.75.'))
print(na_stats %>% filter(na_stats$na_ratio > 0.75))
print(paste(format(get_date_time_stamp()),'-> Columns with NA ratio greater than 0 and less than /equal to 0.75.'))
print(na_stats %>% filter(na_stats$na_ratio !=0 & na_stats$na_ratio <= 0.75))
print(paste(format(get_date_time_stamp()),'-> NA ratio for columns of \'factor\' type'))
print(na_stats %>% filter(na_stats$data_type == "factor"))
print(paste(format(get_date_time_stamp()),'-> Merging NA statistics with numeric / integer data summary...'))
merged_statistics <- merge(na_stats,
numeric_data_summary,
by.x="column_name",
by.y="Col",
all.x=TRUE)
print(merged_statistics)
numeric_data_meadina_mean <- get_meadian_and_mean_numeric_data(numeric_data)
print(paste(format(get_date_time_stamp()),'-> Got mean and median for numeric / integer data summary.'))
#select median and mean for numeric data without columns names - so we will be able identify doubled data
numeric_data_meadina_mean_no_colnames <- numeric_data_meadina_mean[,2:3]
doubled_columns_name_to_remove <- define_columns_with_similar_data(numeric_data_meadina_mean, numeric_data_meadina_mean_no_colnames)
print(paste(format(get_date_time_stamp()),'-> Columns with doubled data defined:'))
print(doubled_columns_name_to_remove)
columns_name_to_remove <- doubled_columns_name_to_remove
#'numeric', 'integer', 'logical' columns where NA is more than 95% - to be removed from data set
merged_statistics_failed_numbers_remove <- filter(merged_statistics, merged_statistics$na_ratio > 0.95
& merged_statistics$data_type %in% c('numeric', 'integer', 'logical'))
print(paste(format(get_date_time_stamp()),'-> Columns with NA ratio 95% defined:'))
print(merged_statistics_failed_numbers_remove)
#combine 2 vectors with column names to remove
columns_name_to_remove <- c(sapply(merged_statistics_failed_numbers_remove$column_name, as.character),
columns_name_to_remove)
print(paste(format(get_date_time_stamp()),'-> Removing columns with NA ratio 95% and doubled data...'))
data <- remove_columns(data, columns_name_to_remove)
print(paste(format(get_date_time_stamp()),'-> Removed columns with NA ratio 95% and doubled data.'))
print(paste(format(get_date_time_stamp()),'-> Replacing columns with NA ratio greater than 10% with its maximum value...'))
data <- substitute_na_by_max_value(data, merged_statistics, 0.10, 0.95)
print(paste(format(get_date_time_stamp()),'-> Replaced columns with NA ratio greater than 10% with its maximum value.'))
print(paste(format(get_date_time_stamp()),'-> Replacing columns with NA ratio greater than 1% with its minimum value...'))
data <- substitute_na_by_min_value(data, merged_statistics, 0.01, 0.10)
print(paste(format(get_date_time_stamp()),'-> Replaced columns with NA ratiogreater than 1% with its minimum value.'))
print(paste(format(get_date_time_stamp()),'-> Finished cleaning. Exiting with code 0.'))
#print(merged_statistics %>% filter(merged_statistics$na_ratio !=0 & merged_statistics$na_ratio <= 0.75))
return(data)
}
file_name <- "LoanStats_2017Q1.csv"
print(paste(format(get_date_time_stamp()),'-> Try to read', file_name, '...'))
data <- read.csv(file_name)
print(paste(format(get_date_time_stamp()),'-> File', file_name, 'was read.'))
data <- clean_loan_stats_file(data)
data <- clean_loan_stats_file(data)
clean_loan_stats_file <- function(data)
{
data_colnames <- get_column_names(data)
print(paste(format(get_date_time_stamp()),'-> Column names were read.'))
data_types <- get_column_types(data)
print(paste(format(get_date_time_stamp()),'-> Column types were read'))
print(count_column_by_types(data_types))
numeric_data <- get_numeric_integer_columns(data)
print(paste(format(get_date_time_stamp()),'-> Numeric / integer data were obtained.'))
numeric_data_summary <- summarise_numeric_data(numeric_data)
print(paste(format(get_date_time_stamp()),'-> Numeric / integer data summary were obtained.'))
na_stats <- get_na_statistics(data, data_colnames, data_types)
print(paste(format(get_date_time_stamp()),'-> NA statistics were obtained.'))
print(na_stats)
print(paste(format(get_date_time_stamp()),'-> Columns with NA ratio greater than 0.75.'))
print(na_stats %>% filter(na_stats$na_ratio > 0.75))
print(paste(format(get_date_time_stamp()),'-> Columns with NA ratio greater than 0 and less than /equal to 0.75.'))
print(na_stats %>% filter(na_stats$na_ratio !=0 & na_stats$na_ratio <= 0.75))
print(paste(format(get_date_time_stamp()),'-> NA ratio for columns of \'factor\' type'))
print(na_stats %>% filter(na_stats$data_type == "factor"))
print(paste(format(get_date_time_stamp()),'-> Merging NA statistics with numeric / integer data summary...'))
merged_statistics <- merge(na_stats,
numeric_data_summary,
by.x="column_name",
by.y="Col",
all.x=TRUE)
print(merged_statistics)
numeric_data_meadina_mean <- get_meadian_and_mean_numeric_data(numeric_data)
print(paste(format(get_date_time_stamp()),'-> Got mean and median for numeric / integer data summary.'))
#select median and mean for numeric data without columns names - so we will be able identify doubled data
numeric_data_meadina_mean_no_colnames <- numeric_data_meadina_mean[,2:3]
doubled_columns_name_to_remove <- define_columns_with_similar_data(numeric_data_meadina_mean, numeric_data_meadina_mean_no_colnames)
print(paste(format(get_date_time_stamp()),'-> Columns with doubled data defined:'))
print(doubled_columns_name_to_remove)
columns_name_to_remove <- doubled_columns_name_to_remove
#'numeric', 'integer', 'logical' columns where NA is more than 95% - to be removed from data set
merged_statistics_failed_numbers_remove <- filter(merged_statistics, merged_statistics$na_ratio > 0.95
& merged_statistics$data_type %in% c('numeric', 'integer', 'logical'))
print(paste(format(get_date_time_stamp()),'-> Columns with NA ratio 95% defined:'))
print(merged_statistics_failed_numbers_remove)
#combine 2 vectors with column names to remove
columns_name_to_remove <- c(sapply(merged_statistics_failed_numbers_remove$column_name, as.character),
columns_name_to_remove)
print(paste(format(get_date_time_stamp()),'-> Removing columns with NA ratio 95% and doubled data...'))
data <- remove_columns(data, columns_name_to_remove)
print(paste(format(get_date_time_stamp()),'-> Removed columns with NA ratio 95% and doubled data.'))
print(paste(format(get_date_time_stamp()),'-> Replacing columns with NA ratio greater than 10% with its maximum value...'))
data <- substitute_na_by_max_value(data, merged_statistics, 0.10, 0.95)
print(paste(format(get_date_time_stamp()),'-> Replaced columns with NA ratio greater than 10% with its maximum value.'))
print(paste(format(get_date_time_stamp()),'-> Replacing columns with NA ratio greater than 1% with its minimum value...'))
data <- substitute_na_by_min_value(data, merged_statistics, 0.00, 0.10)
print(paste(format(get_date_time_stamp()),'-> Replaced columns with NA ratiogreater than 1% with its minimum value.'))
print(paste(format(get_date_time_stamp()),'-> Finished cleaning. Exiting with code 0.'))
#print(merged_statistics %>% filter(merged_statistics$na_ratio !=0 & merged_statistics$na_ratio <= 0.75))
return(data)
}
clean_loan_stats_file <- function(data)
{
data_colnames <- get_column_names(data)
print(paste(format(get_date_time_stamp()),'-> Column names were read.'))
data_types <- get_column_types(data)
print(paste(format(get_date_time_stamp()),'-> Column types were read'))
print(count_column_by_types(data_types))
numeric_data <- get_numeric_integer_columns(data)
print(paste(format(get_date_time_stamp()),'-> Numeric / integer data were obtained.'))
numeric_data_summary <- summarise_numeric_data(numeric_data)
print(paste(format(get_date_time_stamp()),'-> Numeric / integer data summary were obtained.'))
na_stats <- get_na_statistics(data, data_colnames, data_types)
print(paste(format(get_date_time_stamp()),'-> NA statistics were obtained.'))
print(na_stats)
print(paste(format(get_date_time_stamp()),'-> Columns with NA ratio greater than 0.75.'))
print(na_stats %>% filter(na_stats$na_ratio > 0.75))
print(paste(format(get_date_time_stamp()),'-> Columns with NA ratio greater than 0 and less than /equal to 0.75.'))
print(na_stats %>% filter(na_stats$na_ratio !=0 & na_stats$na_ratio <= 0.75))
print(paste(format(get_date_time_stamp()),'-> NA ratio for columns of \'factor\' type'))
print(na_stats %>% filter(na_stats$data_type == "factor"))
print(paste(format(get_date_time_stamp()),'-> Merging NA statistics with numeric / integer data summary...'))
merged_statistics <- merge(na_stats,
numeric_data_summary,
by.x="column_name",
by.y="Col",
all.x=TRUE)
print(merged_statistics)
numeric_data_meadina_mean <- get_meadian_and_mean_numeric_data(numeric_data)
print(paste(format(get_date_time_stamp()),'-> Got mean and median for numeric / integer data summary.'))
#select median and mean for numeric data without columns names - so we will be able identify doubled data
numeric_data_meadina_mean_no_colnames <- numeric_data_meadina_mean[,2:3]
doubled_columns_name_to_remove <- define_columns_with_similar_data(numeric_data_meadina_mean, numeric_data_meadina_mean_no_colnames)
print(paste(format(get_date_time_stamp()),'-> Columns with doubled data defined:'))
print(doubled_columns_name_to_remove)
columns_name_to_remove <- doubled_columns_name_to_remove
#'numeric', 'integer', 'logical' columns where NA is more than 95% - to be removed from data set
merged_statistics_failed_numbers_remove <- filter(merged_statistics, merged_statistics$na_ratio > 0.95
& merged_statistics$data_type %in% c('numeric', 'integer', 'logical'))
print(paste(format(get_date_time_stamp()),'-> Columns with NA ratio 95% defined:'))
print(merged_statistics_failed_numbers_remove)
#combine 2 vectors with column names to remove
columns_name_to_remove <- c(sapply(merged_statistics_failed_numbers_remove$column_name, as.character),
columns_name_to_remove)
print(paste(format(get_date_time_stamp()),'-> Removing columns with NA ratio 95% and doubled data...'))
data <- remove_columns(data, columns_name_to_remove)
print(paste(format(get_date_time_stamp()),'-> Removed columns with NA ratio 95% and doubled data.'))
print(paste(format(get_date_time_stamp()),'-> Replacing columns with NA ratio greater than 10% with its maximum value...'))
data <- substitute_na_by_max_value(data, merged_statistics, 0.10, 0.95)
print(paste(format(get_date_time_stamp()),'-> Replaced columns with NA ratio greater than 10% with its maximum value.'))
print(paste(format(get_date_time_stamp()),'-> Replacing columns with NA ratio greater than 1% with its minimum value...'))
data <- substitute_na_by_min_value(data, merged_statistics, 0.00, 0.10)
print(paste(format(get_date_time_stamp()),'-> Replaced columns with NA ratiogreater than 1% with its minimum value.'))
print(paste(format(get_date_time_stamp()),'-> Finished cleaning. Exiting with code 0.'))
#print(merged_statistics %>% filter(merged_statistics$na_ratio !=0 & merged_statistics$na_ratio <= 0.75))
return(data)
}
file_name <- "LoanStats_2017Q1.csv"
print(paste(format(get_date_time_stamp()),'-> Try to read', file_name, '...'))
data <- read.csv(file_name)
print(paste(format(get_date_time_stamp()),'-> File', file_name, 'was read.'))
data <- clean_loan_stats_file(data)
data <- clean_loan_stats_file(data)
file_name <- "LoanStats_2017Q2.csv"
print(paste(format(get_date_time_stamp()),'-> Try to read', file_name, '...'))
data <- read.csv(file_name)
print(paste(format(get_date_time_stamp()),'-> File', file_name, 'was read.'))
data <- clean_loan_stats_file(data)
file_name <- "LoanStats_2017Q1.csv"
print(paste(format(get_date_time_stamp()),'-> Try to read', file_name, '...'))
data <- read.csv(file_name)
print(paste(format(get_date_time_stamp()),'-> File', file_name, 'was read.'))
data <- clean_loan_stats_file(data)
file_name <- "LoanStats_2017Q2.csv"
print(paste(format(get_date_time_stamp()),'-> Try to read', file_name, '...'))
data <- read.csv(file_name)
print(paste(format(get_date_time_stamp()),'-> File', file_name, 'was read.'))
data <- clean_loan_stats_file(data)
